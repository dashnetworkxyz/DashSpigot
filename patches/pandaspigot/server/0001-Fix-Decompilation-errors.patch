From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: cswhite2000 <18whitechristop@gmail.com>
Date: Mon, 6 Aug 2018 16:39:57 -0700
Subject: [PATCH] Fix Decompilation errors


diff --git a/src/main/java/net/minecraft/server/Achievement.java b/src/main/java/net/minecraft/server/Achievement.java
index a110a484f5e696b1443e2a78a7ac6972a3e74720..f1d2bd2ffcd172fe58785574096801d297a5270b 100644
--- a/src/main/java/net/minecraft/server/Achievement.java
+++ b/src/main/java/net/minecraft/server/Achievement.java
@@ -24,11 +24,11 @@ public class Achievement extends Statistic {
         this.a = i;
         this.b = j;
         if (i < AchievementList.a) {
-            a = i;
+            AchievementList.a = i;
         }
 
         if (j < AchievementList.b) {
-            b = j;
+            AchievementList.b = j;
         }
 
         if (i > AchievementList.c) {
diff --git a/src/main/java/net/minecraft/server/AttributeModifiable.java b/src/main/java/net/minecraft/server/AttributeModifiable.java
index c9297fa2481a93ae24bfd4171c93bd88b85354f6..037e0a13a7efb4723f513fed25729d976da3931f 100644
--- a/src/main/java/net/minecraft/server/AttributeModifiable.java
+++ b/src/main/java/net/minecraft/server/AttributeModifiable.java
@@ -71,15 +71,10 @@ public class AttributeModifiable implements AttributeInstance {
         if (this.a(attributemodifier.a()) != null) {
             throw new IllegalArgumentException("Modifier is already applied on this attribute!");
         } else {
-            Object object = (Set) this.d.get(attributemodifier.b());
+            Set<AttributeModifier> object = this.d.computeIfAbsent(attributemodifier.b(), k -> Sets.newHashSet());
 
-            if (object == null) {
-                object = Sets.newHashSet();
-                this.d.put(attributemodifier.b(), object);
-            }
-
-            ((Set) this.c.get(attributemodifier.c())).add(attributemodifier);
-            ((Set) object).add(attributemodifier);
+            this.c.get(attributemodifier.c()).add(attributemodifier);
+            object.add(attributemodifier);
             this.e.put(attributemodifier.a(), attributemodifier);
             this.f();
         }
diff --git a/src/main/java/net/minecraft/server/BlockDataAbstract.java b/src/main/java/net/minecraft/server/BlockDataAbstract.java
index aa1d985659bf56ac668985c6a823e3f746ab9caa..974088687f2bb3f4b587058fe2f3d11c21363bc8 100644
--- a/src/main/java/net/minecraft/server/BlockDataAbstract.java
+++ b/src/main/java/net/minecraft/server/BlockDataAbstract.java
@@ -16,21 +16,21 @@ public abstract class BlockDataAbstract implements IBlockData {
             if (map_entry == null) {
                 return "<NULL>";
             } else {
-                IBlockState iblockstate = (IBlockState) map_entry.getKey();
+                IBlockState iblockstate = map_entry.getKey();
 
-                return iblockstate.a() + "=" + iblockstate.a((Comparable) map_entry.getValue());
+                return iblockstate.a() + "=" + iblockstate.a(map_entry.getValue());
             }
         }
 
-        public Object apply(Object object) {
-            return this.a((Entry) object);
+        public String apply(Map.Entry<IBlockState, Comparable> object) {
+            return this.a(object);
         }
     };
 
     public BlockDataAbstract() {}
 
     public <T extends Comparable<T>> IBlockData a(IBlockState<T> iblockstate) {
-        return this.set(iblockstate, (Comparable) a(iblockstate.c(), this.get(iblockstate)));
+        return this.set(iblockstate, a(iblockstate.c(), this.get(iblockstate)));
     }
 
     protected static <T> T a(Collection<T> collection, T t0) {
diff --git a/src/main/java/net/minecraft/server/BlockFlowers.java b/src/main/java/net/minecraft/server/BlockFlowers.java
index 23c8b1ba54b2f0821d16cd82939f245bd2d8faf0..809c4658d80c9c7fb30192b195564e901361e6cf 100644
--- a/src/main/java/net/minecraft/server/BlockFlowers.java
+++ b/src/main/java/net/minecraft/server/BlockFlowers.java
@@ -30,8 +30,8 @@ public abstract class BlockFlowers extends BlockPlant {
                     return blockflowers_enumflowervarient.a() == BlockFlowers.this.l();
                 }
 
-                public boolean apply(Object object) {
-                    return this.a((BlockFlowers.EnumFlowerVarient) object);
+                public boolean apply(BlockFlowers.EnumFlowerVarient object) {
+                    return this.a(object);
                 }
             });
         }
@@ -116,8 +116,8 @@ public abstract class BlockFlowers extends BlockPlant {
                         return blockflowers_enumflowervarient.a() == blockflowers_enumflowertype;
                     }
 
-                    public boolean apply(Object object) {
-                        return this.a((BlockFlowers.EnumFlowerVarient) object);
+                    public boolean apply(BlockFlowers.EnumFlowerVarient object) {
+                        return this.a(object);
                     }
                 });
 
diff --git a/src/main/java/net/minecraft/server/BlockLeaves1.java b/src/main/java/net/minecraft/server/BlockLeaves1.java
index 7cc0aa94798dc373ba0b090ed9ec35ac240ee31d..2b57681bd997e57f5f6b8d059e6ca173bf91d6fd 100644
--- a/src/main/java/net/minecraft/server/BlockLeaves1.java
+++ b/src/main/java/net/minecraft/server/BlockLeaves1.java
@@ -9,8 +9,8 @@ public class BlockLeaves1 extends BlockLeaves {
             return blockwood_enumlogvariant.a() < 4;
         }
 
-        public boolean apply(Object object) {
-            return this.a((BlockWood.EnumLogVariant) object);
+        public boolean apply(BlockWood.EnumLogVariant object) {
+            return this.a(object);
         }
     });
 
diff --git a/src/main/java/net/minecraft/server/BlockLeaves2.java b/src/main/java/net/minecraft/server/BlockLeaves2.java
index 6cc8b12add9c6fa677abb2acd438b2b4a41b083a..8a2caa9e986d5c3adbeca5c975ad007dfa623ed9 100644
--- a/src/main/java/net/minecraft/server/BlockLeaves2.java
+++ b/src/main/java/net/minecraft/server/BlockLeaves2.java
@@ -9,8 +9,8 @@ public class BlockLeaves2 extends BlockLeaves {
             return blockwood_enumlogvariant.a() >= 4;
         }
 
-        public boolean apply(Object object) {
-            return this.a((BlockWood.EnumLogVariant) object);
+        public boolean apply(BlockWood.EnumLogVariant object) {
+            return this.a(object);
         }
     });
 
diff --git a/src/main/java/net/minecraft/server/BlockLog1.java b/src/main/java/net/minecraft/server/BlockLog1.java
index 5419cf2013e4a9a764fc44fb287ba5ae2f2215d3..fd89241cf3b43d98a16744149609f860c6acf756 100644
--- a/src/main/java/net/minecraft/server/BlockLog1.java
+++ b/src/main/java/net/minecraft/server/BlockLog1.java
@@ -9,8 +9,8 @@ public class BlockLog1 extends BlockLogAbstract {
             return blockwood_enumlogvariant.a() < 4;
         }
 
-        public boolean apply(Object object) {
-            return this.a((BlockWood.EnumLogVariant) object);
+        public boolean apply(BlockWood.EnumLogVariant object) {
+            return this.a(object);
         }
     });
 
diff --git a/src/main/java/net/minecraft/server/BlockLog2.java b/src/main/java/net/minecraft/server/BlockLog2.java
index 88b674ff4a2a997300a57bf5c92b67bde495f8d8..b244e8f0b90ca4fc51e694acb072baf362cadd8f 100644
--- a/src/main/java/net/minecraft/server/BlockLog2.java
+++ b/src/main/java/net/minecraft/server/BlockLog2.java
@@ -9,8 +9,8 @@ public class BlockLog2 extends BlockLogAbstract {
             return blockwood_enumlogvariant.a() >= 4;
         }
 
-        public boolean apply(Object object) {
-            return this.a((BlockWood.EnumLogVariant) object);
+        public boolean apply(BlockWood.EnumLogVariant object) {
+            return this.a(object);
         }
     });
 
diff --git a/src/main/java/net/minecraft/server/BlockPredicate.java b/src/main/java/net/minecraft/server/BlockPredicate.java
index 3408e4e06e1ab6b25c55112cfeeece27ce464fca..28af027e1336cb636f1c8bc985b515ef52b0ef62 100644
--- a/src/main/java/net/minecraft/server/BlockPredicate.java
+++ b/src/main/java/net/minecraft/server/BlockPredicate.java
@@ -18,7 +18,7 @@ public class BlockPredicate implements Predicate<IBlockData> {
         return iblockdata != null && iblockdata.getBlock() == this.a;
     }
 
-    public boolean apply(Object object) {
-        return this.a((IBlockData) object);
+    public boolean apply(IBlockData object) {
+        return this.a(object);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneComparator.java b/src/main/java/net/minecraft/server/BlockRedstoneComparator.java
index 61777eff48e7a16763c41593e0e6f4001e547a77..00731721eecbc9afcd866b032d9f2c6255c45e23 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneComparator.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneComparator.java
@@ -102,8 +102,8 @@ public class BlockRedstoneComparator extends BlockDiodeAbstract implements ICont
                 return entity != null && entity.getDirection() == enumdirection;
             }
 
-            public boolean apply(Object object) {
-                return this.a((Entity) object);
+            public boolean apply(Entity object) {
+                return this.a(object);
             }
         });
 
diff --git a/src/main/java/net/minecraft/server/BlockSponge.java b/src/main/java/net/minecraft/server/BlockSponge.java
index b46e7c8bf3f0c1cdbc87623ddabea370c11a679a..f5c86be2e06e3fd233ec6853bf70ecad664f11d2 100644
--- a/src/main/java/net/minecraft/server/BlockSponge.java
+++ b/src/main/java/net/minecraft/server/BlockSponge.java
@@ -41,7 +41,7 @@ public class BlockSponge extends Block {
 
     private boolean e(World world, BlockPosition blockposition) {
         LinkedList linkedlist = Lists.newLinkedList();
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList<BlockPosition> arraylist = Lists.newArrayList();
 
         linkedlist.add(new Tuple(blockposition, 0));
         int i = 0;
diff --git a/src/main/java/net/minecraft/server/BlockStateEnum.java b/src/main/java/net/minecraft/server/BlockStateEnum.java
index 48dcbc9c073e92ed640706d9322f67c3255821cd..13a165f9af83a33ed7f547f9a5e4b92e54e5d353 100644
--- a/src/main/java/net/minecraft/server/BlockStateEnum.java
+++ b/src/main/java/net/minecraft/server/BlockStateEnum.java
@@ -18,7 +18,7 @@ public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T>
         super(s, oclass);
         this.a = ImmutableSet.copyOf(collection);
 
-        for (Enum oenum : collection) {
+        for (T oenum : collection) {
             String s1 = ((INamable) oenum).getName();
 
             if (this.b.containsKey(s1)) {
diff --git a/src/main/java/net/minecraft/server/BlockStateList.java b/src/main/java/net/minecraft/server/BlockStateList.java
index af665e7f924e57bfb1d3edeb7a9e3b3144f5bc3a..30585ea8f9f7b2c09f66df15880d7943f43044ae 100644
--- a/src/main/java/net/minecraft/server/BlockStateList.java
+++ b/src/main/java/net/minecraft/server/BlockStateList.java
@@ -28,8 +28,8 @@ public class BlockStateList {
             return iblockstate == null ? "<NULL>" : iblockstate.a();
         }
 
-        public Object apply(Object object) {
-            return this.a((IBlockState) object);
+        public String apply(IBlockState object) {
+            return this.a(object);
         }
     };
     private final Block c;
@@ -43,13 +43,13 @@ public class BlockStateList {
                 return iblockstate.a().compareTo(iblockstate1.a());
             }
 
-            public int compare(Object object, Object object1) {
-                return this.a((IBlockState) object, (IBlockState) object1);
+            public int compare(IBlockState object, IBlockState object1) {
+                return this.a(object, object1);
             }
         });
         this.d = ImmutableList.copyOf(aiblockstate);
         LinkedHashMap linkedhashmap = Maps.newLinkedHashMap();
-        ArrayList arraylist = Lists.newArrayList();
+        ArrayList<BlockData> arraylist = Lists.newArrayList();
 
         for (List list : IteratorUtils.a(this.e())) {
             Map map = MapGeneratorUtils.b(this.d, list);
@@ -151,7 +151,7 @@ public class BlockStateList {
             } else {
                 HashBasedTable hashbasedtable = HashBasedTable.create();
 
-                for (IBlockState iblockstate : this.b.keySet()) {
+                for (IBlockState<?> iblockstate : this.b.keySet()) {
                     for (Comparable comparable : iblockstate.c()) {
                         if (comparable != this.b.get(iblockstate)) {
                             hashbasedtable.put(iblockstate, comparable, map.get(this.b(iblockstate, comparable)));
diff --git a/src/main/java/net/minecraft/server/BlockStatePredicate.java b/src/main/java/net/minecraft/server/BlockStatePredicate.java
index ce887c93dbd6f5092fdf1c3f6cc1a2a7341b3f84..dc064a7fe9a5a9493fe52751021e7652d310a3fc 100644
--- a/src/main/java/net/minecraft/server/BlockStatePredicate.java
+++ b/src/main/java/net/minecraft/server/BlockStatePredicate.java
@@ -43,7 +43,7 @@ public class BlockStatePredicate implements Predicate<IBlockData> {
         }
     }
 
-    public boolean apply(Object object) {
-        return this.a((IBlockData) object);
+    public boolean apply(IBlockData object) {
+        return this.a(object);
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockTorch.java b/src/main/java/net/minecraft/server/BlockTorch.java
index 56fdb748d2ce9f6b28589ecf625c8aef228360ab..c9d37168843cd066a4dbd701e4f919ff22bb0223 100644
--- a/src/main/java/net/minecraft/server/BlockTorch.java
+++ b/src/main/java/net/minecraft/server/BlockTorch.java
@@ -9,8 +9,8 @@ public class BlockTorch extends Block {
             return enumdirection != EnumDirection.DOWN;
         }
 
-        public boolean apply(Object object) {
-            return this.a((EnumDirection) object);
+        public boolean apply(EnumDirection object) {
+            return this.a(object);
         }
     });
 
diff --git a/src/main/java/net/minecraft/server/CommandAbstract.java b/src/main/java/net/minecraft/server/CommandAbstract.java
index d2d8ffd89fcaf8e2b33a5eba54605d5ba2c7de53..37bf12eb56ffbf9155eebbb0817b1195fdc918c5 100644
--- a/src/main/java/net/minecraft/server/CommandAbstract.java
+++ b/src/main/java/net/minecraft/server/CommandAbstract.java
@@ -512,8 +512,8 @@ public abstract class CommandAbstract implements ICommand {
         return this.getCommand().compareTo(icommand.getCommand());
     }
 
-    public int compareTo(Object object) {
-        return this.a((ICommand) object);
+    public int compareTo(ICommand object) {
+        return this.a(object);
     }
 
     public static class CommandNumber {
diff --git a/src/main/java/net/minecraft/server/CommandAchievement.java b/src/main/java/net/minecraft/server/CommandAchievement.java
index 6280c714c240794e710d351dc1a608b71639a03d..052a9f05675d95c49bea1585285a7fd369bf418b 100644
--- a/src/main/java/net/minecraft/server/CommandAchievement.java
+++ b/src/main/java/net/minecraft/server/CommandAchievement.java
@@ -61,7 +61,7 @@ public class CommandAchievement extends CommandAbstract {
                                     throw new CommandException("commands.achievement.alreadyHave", new Object[]{entityplayer.getName(), statistic.j()});
                                 }
 
-                                ArrayList arraylist;
+                                ArrayList<Achievement> arraylist;
 
                                 for (arraylist = Lists.newArrayList(); achievement2.c != null && !entityplayer.getStatisticManager().hasAchievement(achievement2.c); achievement2 = achievement2.c) {
                                     arraylist.add(achievement2.c);
@@ -75,16 +75,16 @@ public class CommandAchievement extends CommandAbstract {
                                     throw new CommandException("commands.achievement.dontHave", new Object[]{entityplayer.getName(), statistic.j()});
                                 }
 
-                                ArrayList arraylist1 = Lists.newArrayList(Iterators.filter(AchievementList.e.iterator(), new Predicate<Achievement>() {
+                                ArrayList<Achievement> arraylist1 = Lists.newArrayList(Iterators.filter(AchievementList.e.iterator(), new Predicate<Achievement>() {
                                     public boolean a(Achievement achievement4) {
                                         return entityplayer.getStatisticManager().hasAchievement(achievement4) && achievement4 != statistic;
                                     }
 
-                                    public boolean apply(Object object) {
-                                        return this.a((Achievement) object);
+                                    public boolean apply(Achievement object) {
+                                        return this.a(object);
                                     }
                                 }));
-                                ArrayList arraylist2 = Lists.newArrayList(arraylist1);
+                                ArrayList<Achievement> arraylist2 = Lists.newArrayList(arraylist1);
 
                                 for (Achievement achievement4 : arraylist1) {
                                     Achievement achievement5 = achievement4;
diff --git a/src/main/java/net/minecraft/server/CommandBanIp.java b/src/main/java/net/minecraft/server/CommandBanIp.java
index 937ceca32d18090ceb1199396f3e3eb8287e9b68..62ae1774856bfef6356e1055cf0c0b2cbf53c9e3 100644
--- a/src/main/java/net/minecraft/server/CommandBanIp.java
+++ b/src/main/java/net/minecraft/server/CommandBanIp.java
@@ -57,7 +57,7 @@ public class CommandBanIp extends CommandAbstract {
         IpBanEntry ipbanentry = new IpBanEntry(s, (Date) null, icommandlistener.getName(), (Date) null, s1);
 
         MinecraftServer.getServer().getPlayerList().getIPBans().add(ipbanentry);
-        List list = MinecraftServer.getServer().getPlayerList().b(s);
+        List<EntityPlayer> list = MinecraftServer.getServer().getPlayerList().b(s);
         String[] astring = new String[list.size()];
         int i = 0;
 
diff --git a/src/main/java/net/minecraft/server/CommandClone.java b/src/main/java/net/minecraft/server/CommandClone.java
index cb8f67b67b752ee9afb12412fc577fc4762ccf88..71307fe1c90dd2896414f37c511b37db451240c4 100644
--- a/src/main/java/net/minecraft/server/CommandClone.java
+++ b/src/main/java/net/minecraft/server/CommandClone.java
@@ -70,9 +70,9 @@ public class CommandClone extends CommandAbstract {
                             }
 
                             ArrayList arraylist = Lists.newArrayList();
-                            ArrayList arraylist1 = Lists.newArrayList();
+                            ArrayList<CommandClone.CommandCloneStoredTileEntity> arraylist1 = Lists.newArrayList();
                             ArrayList arraylist2 = Lists.newArrayList();
-                            LinkedList linkedlist = Lists.newLinkedList();
+                            LinkedList<BlockPosition> linkedlist = Lists.newLinkedList();
                             BlockPosition blockposition3 = new BlockPosition(structureboundingbox1.a - structureboundingbox.a, structureboundingbox1.b - structureboundingbox.b, structureboundingbox1.c - structureboundingbox.c);
 
                             for (int k = structureboundingbox.c; k <= structureboundingbox.f; ++k) {
@@ -119,12 +119,12 @@ public class CommandClone extends CommandAbstract {
                                 }
                             }
 
-                            ArrayList arraylist3 = Lists.newArrayList();
+                            ArrayList<CommandClone.CommandCloneStoredTileEntity> arraylist3 = Lists.newArrayList();
 
                             arraylist3.addAll(arraylist);
                             arraylist3.addAll(arraylist1);
                             arraylist3.addAll(arraylist2);
-                            List list = Lists.reverse(arraylist3);
+                            List<CommandClone.CommandCloneStoredTileEntity> list = Lists.reverse(arraylist3);
 
                             for (CommandClone.CommandCloneStoredTileEntity commandclone_commandclonestoredtileentity : list) {
                                 TileEntity tileentity2 = world.getTileEntity(commandclone_commandclonestoredtileentity.a);
@@ -162,7 +162,7 @@ public class CommandClone extends CommandAbstract {
                                 world.update(commandclone_commandclonestoredtileentity3.a, commandclone_commandclonestoredtileentity3.b.getBlock());
                             }
 
-                            List list1 = world.a(structureboundingbox, false);
+                            List<NextTickListEntry> list1 = world.a(structureboundingbox, false);
 
                             if (list1 != null) {
                                 for (NextTickListEntry nextticklistentry : list1) {
diff --git a/src/main/java/net/minecraft/server/CommandFill.java b/src/main/java/net/minecraft/server/CommandFill.java
index 13b6c9eda3c09853cd6c6fa3d218805984983b9e..9e88546a8e49d557de9ba22befa5c9fcd32ec84b 100644
--- a/src/main/java/net/minecraft/server/CommandFill.java
+++ b/src/main/java/net/minecraft/server/CommandFill.java
@@ -66,7 +66,7 @@ public class CommandFill extends CommandAbstract {
                     }
                 }
 
-                ArrayList arraylist = Lists.newArrayList();
+                ArrayList<BlockPosition> arraylist = Lists.newArrayList();
 
                 j = 0;
 
diff --git a/src/main/java/net/minecraft/server/CommandHandler.java b/src/main/java/net/minecraft/server/CommandHandler.java
index 66c345ff73f7120ac80d615032fc4d66a93b130f..41db5caf58df18b99acc0e3ecfd1686598deaea0 100644
--- a/src/main/java/net/minecraft/server/CommandHandler.java
+++ b/src/main/java/net/minecraft/server/CommandHandler.java
@@ -40,7 +40,7 @@ public class CommandHandler implements ICommandHandler {
             icommandlistener.sendMessage(chatmessage);
         } else if (icommand.canUse(icommandlistener)) {
             if (i > -1) {
-                List list = PlayerSelector.getPlayers(icommandlistener, astring[i], Entity.class);
+                List<Entity> list = PlayerSelector.getPlayers(icommandlistener, astring[i], Entity.class);
                 String s2 = astring[i];
 
                 icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, list.size());
diff --git a/src/main/java/net/minecraft/server/CommandScoreboard.java b/src/main/java/net/minecraft/server/CommandScoreboard.java
index ed31f1e4f09818a59d01e84009a58a8df099cac8..4f55efa747b73f9bcd88ccfa828eaa9fc5315dd3 100644
--- a/src/main/java/net/minecraft/server/CommandScoreboard.java
+++ b/src/main/java/net/minecraft/server/CommandScoreboard.java
@@ -197,7 +197,7 @@ public class CommandScoreboard extends CommandAbstract {
         if (i < 0) {
             return false;
         } else {
-            ArrayList arraylist = Lists.newArrayList(this.d().getPlayers());
+            ArrayList<String> arraylist = Lists.newArrayList(this.d().getPlayers());
             String s = astring[i];
             ArrayList arraylist1 = Lists.newArrayList();
 
@@ -420,7 +420,7 @@ public class CommandScoreboard extends CommandAbstract {
             icommandlistener.sendMessage(chatmessage);
             icommandlistener.sendMessage(new ChatComponentText(a(collection.toArray())));
         } else {
-            Collection collection1 = scoreboard.getTeams();
+            Collection<ScoreboardTeam> collection1 = scoreboard.getTeams();
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, collection1.size());
             if (collection1.size() <= 0) {
@@ -543,7 +543,7 @@ public class CommandScoreboard extends CommandAbstract {
         ScoreboardTeam scoreboardteam = this.e(astring[i]);
 
         if (scoreboardteam != null) {
-            ArrayList arraylist = Lists.newArrayList(scoreboardteam.getPlayerNameSet());
+            ArrayList<String> arraylist = Lists.newArrayList(scoreboardteam.getPlayerNameSet());
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, arraylist.size());
             if (arraylist.isEmpty()) {
@@ -568,7 +568,7 @@ public class CommandScoreboard extends CommandAbstract {
 
     protected void d(ICommandListener icommandlistener) throws CommandException {
         Scoreboard scoreboard = this.d();
-        Collection collection = scoreboard.getObjectives();
+        Collection<ScoreboardObjective> collection = scoreboard.getObjectives();
 
         if (collection.size() <= 0) {
             throw new CommandException("commands.scoreboard.objectives.list.empty", new Object[0]);
@@ -613,7 +613,7 @@ public class CommandScoreboard extends CommandAbstract {
 
         if (astring.length > i) {
             String s = e(icommandlistener, astring[i]);
-            Map map = scoreboard.getPlayerObjectives(s);
+            Map<ScoreboardObjective, ScoreboardScore> map = scoreboard.getPlayerObjectives(s);
 
             icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, map.size());
             if (map.size() <= 0) {
@@ -941,7 +941,7 @@ public class CommandScoreboard extends CommandAbstract {
     }
 
     protected List<String> a(boolean flag) {
-        Collection collection = this.d().getObjectives();
+        Collection<ScoreboardObjective> collection = this.d().getObjectives();
         ArrayList arraylist = Lists.newArrayList();
 
         for (ScoreboardObjective scoreboardobjective : collection) {
@@ -954,7 +954,7 @@ public class CommandScoreboard extends CommandAbstract {
     }
 
     protected List<String> e() {
-        Collection collection = this.d().getObjectives();
+        Collection<ScoreboardObjective> collection = this.d().getObjectives();
         ArrayList arraylist = Lists.newArrayList();
 
         for (ScoreboardObjective scoreboardobjective : collection) {
diff --git a/src/main/java/net/minecraft/server/CommandStats.java b/src/main/java/net/minecraft/server/CommandStats.java
index 8553b83a17e40cd554816252b1221b7b9a9519e0..dd23fa6e7837b86eed10fc42a58ad5b8b7d05902 100644
--- a/src/main/java/net/minecraft/server/CommandStats.java
+++ b/src/main/java/net/minecraft/server/CommandStats.java
@@ -143,7 +143,7 @@ public class CommandStats extends CommandAbstract {
     }
 
     protected List<String> e() {
-        Collection collection = MinecraftServer.getServer().getWorldServer(0).getScoreboard().getObjectives();
+        Collection<ScoreboardObjective> collection = MinecraftServer.getServer().getWorldServer(0).getScoreboard().getObjectives();
         ArrayList arraylist = Lists.newArrayList();
 
         for (ScoreboardObjective scoreboardobjective : collection) {
diff --git a/src/main/java/net/minecraft/server/CrashReportSystemDetails.java b/src/main/java/net/minecraft/server/CrashReportSystemDetails.java
index 72e906c0dff6aba8b4654a446b7df1e3c2438ad1..fadbe4835e4c6893c52dc23adf5b6b91bd26aad1 100644
--- a/src/main/java/net/minecraft/server/CrashReportSystemDetails.java
+++ b/src/main/java/net/minecraft/server/CrashReportSystemDetails.java
@@ -167,7 +167,7 @@ public class CrashReportSystemDetails {
                 }
             }
 
-            public Object call() throws Exception {
+            public String call() throws Exception {
                 return this.a();
             }
         });
@@ -182,7 +182,7 @@ public class CrashReportSystemDetails {
                 }
             }
 
-            public Object call() throws Exception {
+            public String call() throws Exception {
                 return this.a();
             }
         });
@@ -191,7 +191,7 @@ public class CrashReportSystemDetails {
                 return CrashReportSystemDetails.a(blockposition);
             }
 
-            public Object call() throws Exception {
+            public String call() throws Exception {
                 return this.a();
             }
         });
@@ -203,7 +203,7 @@ public class CrashReportSystemDetails {
                 return iblockdata.toString();
             }
 
-            public Object call() throws Exception {
+            public String call() throws Exception {
                 return this.a();
             }
         });
@@ -212,7 +212,7 @@ public class CrashReportSystemDetails {
                 return CrashReportSystemDetails.a(blockposition);
             }
 
-            public Object call() throws Exception {
+            public String call() throws Exception {
                 return this.a();
             }
         });
diff --git a/src/main/java/net/minecraft/server/CustomWorldSettingsFinal.java b/src/main/java/net/minecraft/server/CustomWorldSettingsFinal.java
index bb5b14e619c640c8f4efa8a0cfa1a5297afbe8e2..9d90c1de32592e07334d017b10f2557e9367c9dd 100644
--- a/src/main/java/net/minecraft/server/CustomWorldSettingsFinal.java
+++ b/src/main/java/net/minecraft/server/CustomWorldSettingsFinal.java
@@ -642,12 +642,12 @@ public class CustomWorldSettingsFinal {
             return jsonobject;
         }
 
-        public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+        public CustomWorldSettingsFinal.CustomWorldSettings deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
             return this.a(jsonelement, type, jsondeserializationcontext);
         }
 
-        public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
-            return this.a((CustomWorldSettingsFinal.CustomWorldSettings) object, type, jsonserializationcontext);
+        public JsonElement serialize(CustomWorldSettingsFinal.CustomWorldSettings object, Type type, JsonSerializationContext jsonserializationcontext) {
+            return this.a(object, type, jsonserializationcontext);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/DedicatedPlayerList.java b/src/main/java/net/minecraft/server/DedicatedPlayerList.java
index c2bd5919e0c98a16082045f0c1a53d5da09c38cb..ca310d0e8880e782bd92aafcf08d383373fd2554 100644
--- a/src/main/java/net/minecraft/server/DedicatedPlayerList.java
+++ b/src/main/java/net/minecraft/server/DedicatedPlayerList.java
@@ -145,8 +145,4 @@ public class DedicatedPlayerList extends PlayerList {
     public boolean f(GameProfile gameprofile) {
         return this.getOPs().b(gameprofile);
     }
-
-    public MinecraftServer getServer() {
-        return this.getServer();
-    }
 }
diff --git a/src/main/java/net/minecraft/server/DemoWorldServer.java b/src/main/java/net/minecraft/server/DemoWorldServer.java
index bef6f8c2a5fa6303d4181437a9f1444347f42afe..de19f10022a84714db0c23fe3ca40ed3b7582590 100644
--- a/src/main/java/net/minecraft/server/DemoWorldServer.java
+++ b/src/main/java/net/minecraft/server/DemoWorldServer.java
@@ -5,8 +5,8 @@ public class DemoWorldServer extends WorldServer {
     private static final long I = (long) "North Carolina".hashCode();
     public static final WorldSettings a = (new WorldSettings(DemoWorldServer.I, WorldSettings.EnumGamemode.SURVIVAL, true, false, WorldType.NORMAL)).a();
 
-    public DemoWorldServer(MinecraftServer minecraftserver, IDataManager idatamanager, WorldData worlddata, int i, MethodProfiler methodprofiler) {
-        super(minecraftserver, idatamanager, worlddata, i, methodprofiler);
+    public DemoWorldServer(MinecraftServer minecraftserver, IDataManager idatamanager, WorldData worlddata, int i, MethodProfiler methodprofiler, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen) {
+        super(minecraftserver, idatamanager, worlddata, i, methodprofiler, env, gen);
         this.worldData.a(DemoWorldServer.a);
     }
 }
diff --git a/src/main/java/net/minecraft/server/EntityGuardian.java b/src/main/java/net/minecraft/server/EntityGuardian.java
index 7ccb8bf775d3412ebd4c51db6208ae18bf1f1475..e63c226342bc1e92960c67ef6ace9daf7e14532e 100644
--- a/src/main/java/net/minecraft/server/EntityGuardian.java
+++ b/src/main/java/net/minecraft/server/EntityGuardian.java
@@ -280,8 +280,8 @@ public class EntityGuardian extends EntityMonster {
                         return EntityGuardian.this.h(entityplayer1) < 2500.0D && entityplayer1.playerInteractManager.c();
                     }
 
-                    public boolean apply(Object object) {
-                        return this.a((EntityPlayer) object);
+                    public boolean apply(EntityPlayer object) {
+                        return this.a(object);
                     }
                 })) {
                     if (!entityplayer.hasEffect(mobeffectlist) || entityplayer.getEffect(mobeffectlist).getAmplifier() < 2 || entityplayer.getEffect(mobeffectlist).getDuration() < 1200) {
@@ -385,8 +385,8 @@ public class EntityGuardian extends EntityMonster {
             return (entityliving instanceof EntityHuman || entityliving instanceof EntitySquid) && entityliving.h(this.a) > 9.0D;
         }
 
-        public boolean apply(Object object) {
-            return this.a((EntityLiving) object);
+        public boolean apply(EntityLiving object) {
+            return this.a(object);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityTameableAnimal.java b/src/main/java/net/minecraft/server/EntityTameableAnimal.java
index a8a9d8746f582c2c52f224e1048034442eb15f4f..4953ee93136527cb91370a2fc7d46b358a0c19ef 100644
--- a/src/main/java/net/minecraft/server/EntityTameableAnimal.java
+++ b/src/main/java/net/minecraft/server/EntityTameableAnimal.java
@@ -164,8 +164,4 @@ public abstract class EntityTameableAnimal extends EntityAnimal implements Entit
 
         super.die(damagesource);
     }
-
-    public Entity getOwner() {
-        return this.getOwner();
-    }
 }
diff --git a/src/main/java/net/minecraft/server/EntityTypes.java b/src/main/java/net/minecraft/server/EntityTypes.java
index afe00cb9ad704db62a2eb29afa94577390f89e61..7d1d3a4f371a2b8b923b542b3390e2d4f77c4fe8 100644
--- a/src/main/java/net/minecraft/server/EntityTypes.java
+++ b/src/main/java/net/minecraft/server/EntityTypes.java
@@ -126,7 +126,7 @@ public class EntityTypes {
     public static void a() {}
 
     public static List<String> b() {
-        Set set = EntityTypes.c.keySet();
+        Set<String> set = EntityTypes.c.keySet();
         ArrayList arraylist = Lists.newArrayList();
 
         for (String s : set) {
diff --git a/src/main/java/net/minecraft/server/EntityWitch.java b/src/main/java/net/minecraft/server/EntityWitch.java
index 189ff9d30343d7d5d82e44ddf5152d8dbfefc17c..8dcef3414597112a3b2fecca336f4a0b67ffc7a3 100644
--- a/src/main/java/net/minecraft/server/EntityWitch.java
+++ b/src/main/java/net/minecraft/server/EntityWitch.java
@@ -62,7 +62,7 @@ public class EntityWitch extends EntityMonster implements IRangedEntity {
 
                     this.setEquipment(0, (ItemStack) null);
                     if (itemstack != null && itemstack.getItem() == Items.POTION) {
-                        List list = Items.POTION.h(itemstack);
+                        List<MobEffect> list = Items.POTION.h(itemstack);
 
                         if (list != null) {
                             for (MobEffect mobeffect : list) {
diff --git a/src/main/java/net/minecraft/server/EnumDirection.java b/src/main/java/net/minecraft/server/EnumDirection.java
index 33f374ac46f01ab795bf35331ae0a5392b3563ac..2dc60547aa5c9b325e49d668f32eeac3491a7aa3 100644
--- a/src/main/java/net/minecraft/server/EnumDirection.java
+++ b/src/main/java/net/minecraft/server/EnumDirection.java
@@ -185,8 +185,8 @@ public enum EnumDirection implements INamable {
             return this.e;
         }
 
-        public boolean apply(Object object) {
-            return this.a((EnumDirection) object);
+        public boolean apply(EnumDirection object) {
+            return this.a(object);
         }
 
         static {
@@ -249,8 +249,8 @@ public enum EnumDirection implements INamable {
             return Iterators.forArray(this.a());
         }
 
-        public boolean apply(Object object) {
-            return this.a((EnumDirection) object);
+        public boolean apply(EnumDirection object) {
+            return this.a(object);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/EnumProtocol.java b/src/main/java/net/minecraft/server/EnumProtocol.java
index 6bbbf7c824ea03e8fd68d35812781cddfb568ed8..4c6f31e25c65c639b085d071af384442fca7e839 100644
--- a/src/main/java/net/minecraft/server/EnumProtocol.java
+++ b/src/main/java/net/minecraft/server/EnumProtocol.java
@@ -149,20 +149,15 @@ public enum EnumProtocol {
     }
 
     protected EnumProtocol a(EnumProtocolDirection enumprotocoldirection, Class<? extends Packet> oclass) {
-        Object object = (BiMap) this.j.get(enumprotocoldirection);
+        BiMap<Integer, Class<? extends Packet>> map = this.j.computeIfAbsent(enumprotocoldirection, k -> HashBiMap.create());
 
-        if (object == null) {
-            object = HashBiMap.create();
-            this.j.put(enumprotocoldirection, object);
-        }
-
-        if (((BiMap) object).containsValue(oclass)) {
-            String s = enumprotocoldirection + " packet " + oclass + " is already known to ID " + ((BiMap) object).inverse().get(oclass);
+        if (map.containsValue(oclass)) {
+            String s = enumprotocoldirection + " packet " + oclass + " is already known to ID " + map.inverse().get(oclass);
 
             LogManager.getLogger().fatal(s);
             throw new IllegalArgumentException(s);
         } else {
-            ((BiMap) object).put(((BiMap) object).size(), oclass);
+            map.put(map.size(), oclass);
             return this;
         }
     }
@@ -200,7 +195,7 @@ public enum EnumProtocol {
             EnumProtocol.g[i - EnumProtocol.e] = enumprotocol;
 
             for (EnumProtocolDirection enumprotocoldirection : enumprotocol.j.keySet()) {
-                for (Class oclass : ((BiMap) enumprotocol.j.get(enumprotocoldirection)).values()) {
+                for (Class<? extends Packet> oclass : enumprotocol.j.get(enumprotocoldirection).values()) {
                     if (EnumProtocol.h.containsKey(oclass) && EnumProtocol.h.get(oclass) != enumprotocol) {
                         throw new Error("Packet " + oclass + " is already assigned to protocol " + EnumProtocol.h.get(oclass) + " - can't reassign to " + enumprotocol);
                     }
diff --git a/src/main/java/net/minecraft/server/GameProfileBanList.java b/src/main/java/net/minecraft/server/GameProfileBanList.java
index f74d6d719d5abb5ee4c3c5b11503f66121f3f3b4..cd25d253269f4466bbac1118251a2280c2f8feb6 100644
--- a/src/main/java/net/minecraft/server/GameProfileBanList.java
+++ b/src/main/java/net/minecraft/server/GameProfileBanList.java
@@ -43,7 +43,7 @@ public class GameProfileBanList extends JsonList<GameProfile, GameProfileBanEntr
         return null;
     }
 
-    protected String a(Object object) {
-        return this.b((GameProfile) object);
+    protected String a(GameProfile object) {
+        return this.b(object);
     }
 }
diff --git a/src/main/java/net/minecraft/server/GenLayer.java b/src/main/java/net/minecraft/server/GenLayer.java
index 47d120bf5e70a79f5604be48d3459740004fea83..be00abc9a7f828c3a0d88341c59a2f2de9153cd0 100644
--- a/src/main/java/net/minecraft/server/GenLayer.java
+++ b/src/main/java/net/minecraft/server/GenLayer.java
@@ -30,7 +30,7 @@ public abstract class GenLayer {
         genlayerzoom1 = new GenLayerZoom(2003L, genlayerzoom1);
         GenLayerIsland genlayerisland3 = new GenLayerIsland(4L, genlayerzoom1);
         GenLayerMushroomIsland genlayermushroomisland = new GenLayerMushroomIsland(5L, genlayerisland3);
-        GenLayerDeepOcean genlayerdeepocean = new GenLayerDeepOcean(4L, genlayermushroomisland);
+        GenLayer genlayerdeepocean = new GenLayerDeepOcean(4L, genlayermushroomisland);
 
         genlayerdeepocean = GenLayerZoom.b(1000L, genlayerdeepocean, 0);
         CustomWorldSettingsFinal customworldsettingsfinal = null;
@@ -48,13 +48,13 @@ public abstract class GenLayer {
         }
 
         GenLayer genlayer = GenLayerZoom.b(1000L, genlayerdeepocean, 0);
-        GenLayerCleaner genlayercleaner = new GenLayerCleaner(100L, genlayer);
-        GenLayerBiome genlayerbiome = new GenLayerBiome(200L, genlayerdeepocean, worldtype, s);
+        GenLayer genlayercleaner = new GenLayerCleaner(100L, genlayer);
+        GenLayer genlayerbiome = new GenLayerBiome(200L, genlayerdeepocean, worldtype, s);
 
         genlayerbiome = GenLayerZoom.b(1000L, genlayerbiome, 2);
         GenLayerDesert genlayerdesert = new GenLayerDesert(1000L, genlayerbiome);
         GenLayer genlayer1 = GenLayerZoom.b(1000L, genlayercleaner, 2);
-        GenLayerRegionHills genlayerregionhills = new GenLayerRegionHills(1000L, genlayerdesert, genlayer1);
+        GenLayer genlayerregionhills = new GenLayerRegionHills(1000L, genlayerdesert, genlayer1);
 
         genlayercleaner = GenLayerZoom.b(1000L, genlayercleaner, 2);
         genlayercleaner = GenLayerZoom.b(1000L, genlayercleaner, k);
@@ -153,7 +153,7 @@ public abstract class GenLayer {
                         return String.valueOf(biomebase);
                     }
 
-                    public Object call() throws Exception {
+                    public String call() throws Exception {
                         return this.a();
                     }
                 });
@@ -162,7 +162,7 @@ public abstract class GenLayer {
                         return String.valueOf(biomebase1);
                     }
 
-                    public Object call() throws Exception {
+                    public String call() throws Exception {
                         return this.a();
                     }
                 });
@@ -182,6 +182,6 @@ public abstract class GenLayer {
     }
 
     protected int b(int i, int j, int k, int l) {
-        return j == k && k == l ? j : (i == j && i == k ? i : (i == j && i == l ? i : (i == k && i == l ? i : (i == j && k != l ? i : (i == k && j != l ? i : (i == l && j != k ? i : (j == k && i != l ? j : (j == l && i != k ? j : (k == l && i != j ? k : this.a(i, j, k, l))))))))));
+        return j == k && k == l ? j : (i == j && i == k ? i : (i == j && i == l ? i : (i == k && i == l ? i : (i == j && k != l ? i : (i == k && j != l ? i : (i == l && j != k ? i : (j == k && i != l ? j : (j == l && i != k ? j : (k == l && i != j ? k : this.a(new int[]{i, j, k, l}))))))))));
     }
 }
diff --git a/src/main/java/net/minecraft/server/IChatBaseComponent.java b/src/main/java/net/minecraft/server/IChatBaseComponent.java
index e2764c3e1a71af0c47a73b6b9211c03630c0a4af..9854326f726e10751370d6f06b849f496a0f5da1 100644
--- a/src/main/java/net/minecraft/server/IChatBaseComponent.java
+++ b/src/main/java/net/minecraft/server/IChatBaseComponent.java
@@ -207,11 +207,11 @@ public interface IChatBaseComponent extends Iterable<IChatBaseComponent> {
             return (IChatBaseComponent) IChatBaseComponent.ChatSerializer.a.fromJson(s, IChatBaseComponent.class);
         }
 
-        public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
-            return this.a((IChatBaseComponent) object, type, jsonserializationcontext);
+        public JsonElement serialize(IChatBaseComponent object, Type type, JsonSerializationContext jsonserializationcontext) {
+            return this.a(object, type, jsonserializationcontext);
         }
 
-        public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+        public IChatBaseComponent deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
             return this.a(jsonelement, type, jsondeserializationcontext);
         }
 
diff --git a/src/main/java/net/minecraft/server/IEntitySelector.java b/src/main/java/net/minecraft/server/IEntitySelector.java
index dad4744aaefe995aa98f461f4a1a459e0dd56ba7..dcf4b0d50bbea7c565e72f72a6b3c16a4cceabb9 100644
--- a/src/main/java/net/minecraft/server/IEntitySelector.java
+++ b/src/main/java/net/minecraft/server/IEntitySelector.java
@@ -9,8 +9,8 @@ public final class IEntitySelector {
             return entity.isAlive();
         }
 
-        public boolean apply(Object object) {
-            return this.a((Entity) object);
+        public boolean apply(Entity object) {
+            return this.a(object);
         }
     };
     public static final Predicate<Entity> b = new Predicate<Entity>() {
@@ -18,8 +18,8 @@ public final class IEntitySelector {
             return entity.isAlive() && entity.passenger == null && entity.vehicle == null;
         }
 
-        public boolean apply(Object object) {
-            return this.a((Entity) object);
+        public boolean apply(Entity object) {
+            return this.a(object);
         }
     };
     public static final Predicate<Entity> c = new Predicate<Entity>() {
@@ -27,8 +27,8 @@ public final class IEntitySelector {
             return entity instanceof IInventory && entity.isAlive();
         }
 
-        public boolean apply(Object object) {
-            return this.a((Entity) object);
+        public boolean apply(Entity object) {
+            return this.a(object);
         }
     };
     public static final Predicate<Entity> d = new Predicate<Entity>() {
@@ -36,8 +36,8 @@ public final class IEntitySelector {
             return !(entity instanceof EntityHuman) || !((EntityHuman) entity).isSpectator();
         }
 
-        public boolean apply(Object object) {
-            return this.a((Entity) object);
+        public boolean apply(Entity object) {
+            return this.a(object);
         }
     };
 
@@ -61,8 +61,8 @@ public final class IEntitySelector {
             }
         }
 
-        public boolean apply(Object object) {
-            return this.a((Entity) object);
+        public boolean apply(Entity object) {
+            return this.a(object);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/server/IMonster.java b/src/main/java/net/minecraft/server/IMonster.java
index 669b56ca39f0c169350fecd7ce5500d4b703a747..81d9380d697d1d8c003efa7841e2814debccec76 100644
--- a/src/main/java/net/minecraft/server/IMonster.java
+++ b/src/main/java/net/minecraft/server/IMonster.java
@@ -9,8 +9,8 @@ public interface IMonster extends IAnimal {
             return entity instanceof IMonster;
         }
 
-        public boolean apply(Object object) {
-            return this.a((Entity) object);
+        public boolean apply(Entity object) {
+            return this.a(object);
         }
     };
     Predicate<Entity> e = new Predicate<Entity>() {
@@ -18,8 +18,8 @@ public interface IMonster extends IAnimal {
             return entity instanceof IMonster && !entity.isInvisible();
         }
 
-        public boolean apply(Object object) {
-            return this.a((Entity) object);
+        public boolean apply(Entity object) {
+            return this.a(object);
         }
     };
 }
diff --git a/src/main/java/net/minecraft/server/InsensitiveStringMap.java b/src/main/java/net/minecraft/server/InsensitiveStringMap.java
index 813219c4f980aec7ad987820eb2fa36717c1fe42..0ec714e16daf76d2552fccb22ce990d6a02bb30c 100644
--- a/src/main/java/net/minecraft/server/InsensitiveStringMap.java
+++ b/src/main/java/net/minecraft/server/InsensitiveStringMap.java
@@ -41,8 +41,8 @@ public class InsensitiveStringMap<V> implements Map<String, V> {
     }
 
     public void putAll(Map<? extends String, ? extends V> map) {
-        for (Entry entry : map.entrySet()) {
-            this.a((String) entry.getKey(), entry.getValue());
+        for (Entry<? extends String, ? extends V> entry : map.entrySet()) {
+            this.a(entry.getKey(), entry.getValue());
         }
 
     }
@@ -63,7 +63,7 @@ public class InsensitiveStringMap<V> implements Map<String, V> {
         return this.a.entrySet();
     }
 
-    public Object put(Object object, Object object1) {
-        return this.a((String) object, object1);
+    public V put(String object, V object1) {
+        return this.a(object, object1);
     }
 }
diff --git a/src/main/java/net/minecraft/server/IntHashMap.java b/src/main/java/net/minecraft/server/IntHashMap.java
index 8348bfc560037f02a7acce590be084954261a43e..6cf9641c15190c3c6eb96b3ac06938533f4553ae 100644
--- a/src/main/java/net/minecraft/server/IntHashMap.java
+++ b/src/main/java/net/minecraft/server/IntHashMap.java
@@ -21,7 +21,7 @@ public class IntHashMap<V> {
     public V get(int i) {
         int j = g(i);
 
-        for (IntHashMap.IntHashMapEntry inthashmap_inthashmapentry = this.a[a(j, this.a.length)]; inthashmap_inthashmapentry != null; inthashmap_inthashmapentry = inthashmap_inthashmapentry.c) {
+        for (IntHashMap.IntHashMapEntry<V> inthashmap_inthashmapentry = this.a[a(j, this.a.length)]; inthashmap_inthashmapentry != null; inthashmap_inthashmapentry = inthashmap_inthashmapentry.c) {
             if (inthashmap_inthashmapentry.a == i) {
                 return inthashmap_inthashmapentry.b;
             }
diff --git a/src/main/java/net/minecraft/server/IpBanList.java b/src/main/java/net/minecraft/server/IpBanList.java
index 617d326f04ee49de6231cead2e2042ae5d844ac8..e91b9648e420257e490ac3721f4caf4014459ccb 100644
--- a/src/main/java/net/minecraft/server/IpBanList.java
+++ b/src/main/java/net/minecraft/server/IpBanList.java
@@ -23,7 +23,7 @@ public class IpBanList extends JsonList<String, IpBanEntry> {
     public IpBanEntry get(SocketAddress socketaddress) {
         String s = this.c(socketaddress);
 
-        return (IpBanEntry) this.get((Object) s);
+        return this.get(s);
     }
 
     private String c(SocketAddress socketaddress) {
diff --git a/src/main/java/net/minecraft/server/Item.java b/src/main/java/net/minecraft/server/Item.java
index d9a067d909054091642a7cd5f36030b42a1986ab..e20e2296884d2dd333659768bf03fdf5e3b3e430 100644
--- a/src/main/java/net/minecraft/server/Item.java
+++ b/src/main/java/net/minecraft/server/Item.java
@@ -252,8 +252,8 @@ public class Item {
                 return BlockStone.EnumStoneVariant.a(itemstack.getData()).d();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("stone"));
         a((Block) Blocks.GRASS, (Item) (new ItemWithAuxData(Blocks.GRASS, false)));
@@ -262,8 +262,8 @@ public class Item {
                 return BlockDirt.EnumDirtVariant.a(itemstack.getData()).c();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("dirt"));
         c(Blocks.COBBLESTONE);
@@ -272,8 +272,8 @@ public class Item {
                 return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("wood"));
         a(Blocks.SAPLING, (Item) (new ItemMultiTexture(Blocks.SAPLING, Blocks.SAPLING, new Function<ItemStack, String>() {
@@ -281,8 +281,8 @@ public class Item {
                 return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("sapling"));
         c(Blocks.BEDROCK);
@@ -291,8 +291,8 @@ public class Item {
                 return BlockSand.EnumSandVariant.a(itemstack.getData()).d();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("sand"));
         c(Blocks.GRAVEL);
@@ -304,8 +304,8 @@ public class Item {
                 return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("log"));
         a(Blocks.LOG2, (Item) (new ItemMultiTexture(Blocks.LOG2, Blocks.LOG2, new Function<ItemStack, String>() {
@@ -313,8 +313,8 @@ public class Item {
                 return BlockWood.EnumLogVariant.a(itemstack.getData() + 4).d();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("log"));
         a((Block) Blocks.LEAVES, (Item) (new ItemLeaves(Blocks.LEAVES)).b("leaves"));
@@ -324,8 +324,8 @@ public class Item {
                 return (itemstack.getData() & 1) == 1 ? "wet" : "dry";
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("sponge"));
         c(Blocks.GLASS);
@@ -337,8 +337,8 @@ public class Item {
                 return BlockSandStone.EnumSandstoneVariant.a(itemstack.getData()).c();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("sandStone"));
         c(Blocks.NOTEBLOCK);
@@ -355,8 +355,8 @@ public class Item {
                 return BlockFlowers.EnumFlowerVarient.a(BlockFlowers.EnumFlowerType.YELLOW, itemstack.getData()).d();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("flower"));
         a((Block) Blocks.RED_FLOWER, (Item) (new ItemMultiTexture(Blocks.RED_FLOWER, Blocks.RED_FLOWER, new Function<ItemStack, String>() {
@@ -364,8 +364,8 @@ public class Item {
                 return BlockFlowers.EnumFlowerVarient.a(BlockFlowers.EnumFlowerType.RED, itemstack.getData()).d();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("rose"));
         c((Block) Blocks.BROWN_MUSHROOM);
@@ -420,8 +420,8 @@ public class Item {
                 return BlockMonsterEggs.EnumMonsterEggVarient.a(itemstack.getData()).c();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("monsterStoneEgg"));
         a(Blocks.STONEBRICK, (Item) (new ItemMultiTexture(Blocks.STONEBRICK, Blocks.STONEBRICK, new Function<ItemStack, String>() {
@@ -429,8 +429,8 @@ public class Item {
                 return BlockSmoothBrick.EnumStonebrickType.a(itemstack.getData()).c();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("stonebricksmooth"));
         c(Blocks.BROWN_MUSHROOM_BLOCK);
@@ -473,8 +473,8 @@ public class Item {
                 return BlockCobbleWall.EnumCobbleVariant.a(itemstack.getData()).c();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("cobbleWall"));
         c(Blocks.WOODEN_BUTTON);
@@ -506,8 +506,8 @@ public class Item {
                 return BlockTallPlant.EnumTallFlowerVariants.a(itemstack.getData()).c();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("doublePlant"));
         a((Block) Blocks.STAINED_GLASS, (Item) (new ItemCloth(Blocks.STAINED_GLASS)).b("stainedGlass"));
@@ -517,8 +517,8 @@ public class Item {
                 return BlockPrismarine.EnumPrismarineVariant.a(itemstack.getData()).c();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("prismarine"));
         c(Blocks.SEA_LANTERN);
@@ -527,8 +527,8 @@ public class Item {
                 return BlockRedSandstone.EnumRedSandstoneVariant.a(itemstack.getData()).c();
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         })).b("redSandStone"));
         c(Blocks.RED_SANDSTONE_STAIRS);
diff --git a/src/main/java/net/minecraft/server/ItemMultiTexture.java b/src/main/java/net/minecraft/server/ItemMultiTexture.java
index 57d4999bea8adf1f626fb8dd4e39f8c4391f75fc..54cab527f3d25b39ac7290d7058994a6c1e71817 100644
--- a/src/main/java/net/minecraft/server/ItemMultiTexture.java
+++ b/src/main/java/net/minecraft/server/ItemMultiTexture.java
@@ -27,8 +27,8 @@ public class ItemMultiTexture extends ItemBlock {
                 return astring[i];
             }
 
-            public Object apply(Object object) {
-                return this.a((ItemStack) object);
+            public String apply(ItemStack object) {
+                return this.a(object);
             }
         });
     }
diff --git a/src/main/java/net/minecraft/server/ItemPotion.java b/src/main/java/net/minecraft/server/ItemPotion.java
index 78c01c30f6d5c807cf63291ae96815e4ba566451..444c36833bd9db16b2b4b2b03e04448794660b12 100644
--- a/src/main/java/net/minecraft/server/ItemPotion.java
+++ b/src/main/java/net/minecraft/server/ItemPotion.java
@@ -62,7 +62,7 @@ public class ItemPotion extends Item {
         }
 
         if (!world.isClientSide) {
-            List list = this.h(itemstack);
+            List<MobEffect> list = this.h(itemstack);
 
             if (list != null) {
                 for (MobEffect mobeffect : list) {
diff --git a/src/main/java/net/minecraft/server/ItemStep.java b/src/main/java/net/minecraft/server/ItemStep.java
index 7eedbbd02f13f6796b6a8db2983a9934bc58c48c..de53d53cb63faec3ef372ef81822e675b05f45e1 100644
--- a/src/main/java/net/minecraft/server/ItemStep.java
+++ b/src/main/java/net/minecraft/server/ItemStep.java
@@ -58,7 +58,8 @@ public class ItemStep extends ItemBlock {
             Comparable comparable = iblockdata.get(this.b.n());
 
             if (comparable == object) {
-                IBlockData iblockdata1 = this.c.getBlockData().set(this.b.n(), comparable);
+                IBlockState iblockstate = this.b.n();
+                IBlockData iblockdata1 = this.c.getBlockData().set(iblockstate, comparable);
 
                 if (world.b(this.c.a(world, blockposition, iblockdata1)) && world.setTypeAndData(blockposition, iblockdata1, 3)) {
                     world.makeSound((double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.5F), (double) ((float) blockposition.getZ() + 0.5F), this.c.stepSound.getPlaceSound(), (this.c.stepSound.getVolume1() + 1.0F) / 2.0F, this.c.stepSound.getVolume2() * 0.8F);
diff --git a/src/main/java/net/minecraft/server/IteratorUtils.java b/src/main/java/net/minecraft/server/IteratorUtils.java
index df0da0eb7b431cd0315781f9f3246584bbd483eb..90dbb7c5f1b05c62f404df3da7046a1e5139ddfe 100644
--- a/src/main/java/net/minecraft/server/IteratorUtils.java
+++ b/src/main/java/net/minecraft/server/IteratorUtils.java
@@ -15,7 +15,7 @@ import java.util.NoSuchElementException;
 public class IteratorUtils {
 
     public static <T> Iterable<T[]> a(Class<T> oclass, Iterable<? extends Iterable<? extends T>> iterable) {
-        return new IteratorUtils.ClassIterable<T[]>(oclass, (Iterable[]) b(Iterable.class, iterable));
+        return new IteratorUtils.ClassIterable<>(oclass, (Iterable[]) b(Iterable.class, iterable));
     }
 
     public static <T> Iterable<List<T>> a(Iterable<? extends Iterable<? extends T>> iterable) {
@@ -45,10 +45,10 @@ public class IteratorUtils {
         private ArrayToList() {}
 
         public List<T> a(Object[] aobject) {
-            return Arrays.asList(aobject);
+            return Arrays.asList((T[]) aobject);
         }
 
-        public Object apply(Object object) {
+        public List<T> apply(Object[] object) {
             return this.a(object);
         }
     }
@@ -144,7 +144,7 @@ public class IteratorUtils {
                 }
             }
 
-            public Object next() {
+            public T[] next() {
                 return this.a();
             }
         }
diff --git a/src/main/java/net/minecraft/server/LongHashMap.java b/src/main/java/net/minecraft/server/LongHashMap.java
index 2f48577aeae812317cd76ceade62979e580429e2..686a07181ebddef15d6c6a2a16b6ff61d47abbb6 100644
--- a/src/main/java/net/minecraft/server/LongHashMap.java
+++ b/src/main/java/net/minecraft/server/LongHashMap.java
@@ -33,7 +33,7 @@ public class LongHashMap<V> {
     public V getEntry(long i) {
         int j = g(i);
 
-        for (LongHashMap.LongHashMapEntry longhashmap_longhashmapentry = this.entries[a(j, this.c)]; longhashmap_longhashmapentry != null; longhashmap_longhashmapentry = longhashmap_longhashmapentry.c) {
+        for (LongHashMap.LongHashMapEntry<V> longhashmap_longhashmapentry = this.entries[a(j, this.c)]; longhashmap_longhashmapentry != null; longhashmap_longhashmapentry = longhashmap_longhashmapentry.c) {
             if (longhashmap_longhashmapentry.a == i) {
                 return longhashmap_longhashmapentry.b;
             }
diff --git a/src/main/java/net/minecraft/server/MapGeneratorUtils.java b/src/main/java/net/minecraft/server/MapGeneratorUtils.java
index 8bd29c1bb7e0bf8820da95db245540a56ae3ef3b..40a88c2e2e0fb8da1e5f18f331ed95b651500791 100644
--- a/src/main/java/net/minecraft/server/MapGeneratorUtils.java
+++ b/src/main/java/net/minecraft/server/MapGeneratorUtils.java
@@ -12,9 +12,9 @@ public class MapGeneratorUtils {
     }
 
     public static <K, V> Map<K, V> a(Iterable<K> iterable, Iterable<V> iterable1, Map<K, V> map) {
-        Iterator iterator = iterable1.iterator();
+        Iterator<V> iterator = iterable1.iterator();
 
-        for (Object object : iterable) {
+        for (K object : iterable) {
             map.put(object, iterator.next());
         }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b400ce04db4dfefaca9a040902bf2d5e50168b7f..864b3bc1375cb72588b63855eee8fa4ff569a5d3 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -259,7 +259,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 }
                 worlddata.checkName(s1); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
                 if (this.X()) {
-                    world = (WorldServer) (new DemoWorldServer(this, idatamanager, worlddata, dimension, this.methodProfiler)).b();
+                    world = (WorldServer) (new DemoWorldServer(this, idatamanager, worlddata, dimension, this.methodProfiler, org.bukkit.World.Environment.getEnvironment(dimension), gen)).b();
                 } else {
                     world = (WorldServer) (new WorldServer(this, idatamanager, worlddata, dimension, this.methodProfiler, org.bukkit.World.Environment.getEnvironment(dimension), gen)).b();
                 }
diff --git a/src/main/java/net/minecraft/server/MojangStatisticsGenerator.java b/src/main/java/net/minecraft/server/MojangStatisticsGenerator.java
index 0c84a9c7cf99a7523edc56fe0f78825cf05b5df3..c9e1b5cb3b7c10fffd408a6c11d4f712075c0219 100644
--- a/src/main/java/net/minecraft/server/MojangStatisticsGenerator.java
+++ b/src/main/java/net/minecraft/server/MojangStatisticsGenerator.java
@@ -76,7 +76,7 @@ public class MojangStatisticsGenerator {
 
     private void i() {
         RuntimeMXBean runtimemxbean = ManagementFactory.getRuntimeMXBean();
-        List list = runtimemxbean.getInputArguments();
+        List<String> list = runtimemxbean.getInputArguments();
         int i = 0;
 
         for (String s : list) {
diff --git a/src/main/java/net/minecraft/server/NBTTagCompound.java b/src/main/java/net/minecraft/server/NBTTagCompound.java
index 97091b5ea8e4e4687a81751f9e29180657ff814b..8db9c36e157d4f03a5cd777e51674a9d458430c9 100644
--- a/src/main/java/net/minecraft/server/NBTTagCompound.java
+++ b/src/main/java/net/minecraft/server/NBTTagCompound.java
@@ -259,7 +259,7 @@ public class NBTTagCompound extends NBTBase {
                 return NBTBase.a[((NBTBase) NBTTagCompound.this.map.get(s)).getTypeId()];
             }
 
-            public Object call() throws Exception {
+            public String call() throws Exception {
                 return this.a();
             }
         });
@@ -268,7 +268,7 @@ public class NBTTagCompound extends NBTBase {
                 return NBTBase.a[i];
             }
 
-            public Object call() throws Exception {
+            public String call() throws Exception {
                 return this.a();
             }
         });
diff --git a/src/main/java/net/minecraft/server/OpList.java b/src/main/java/net/minecraft/server/OpList.java
index 2fbad70eee266dd4d161451b3bddedcafbf58f18..9cdb509e6b5e4a97e1a11e01595a39f3665da9ea 100644
--- a/src/main/java/net/minecraft/server/OpList.java
+++ b/src/main/java/net/minecraft/server/OpList.java
@@ -45,7 +45,7 @@ public class OpList extends JsonList<GameProfile, OpListEntry> {
         return null;
     }
 
-    protected String a(Object object) {
-        return this.c((GameProfile) object);
+    protected String a(GameProfile object) {
+        return this.c(object);
     }
 }
diff --git a/src/main/java/net/minecraft/server/PacketCompressor.java b/src/main/java/net/minecraft/server/PacketCompressor.java
index 639ae31a91085a6fb96a735d5860fe8b137eaf67..8107890ffbc205f5ce7e22c04d62fb8b16d087c2 100644
--- a/src/main/java/net/minecraft/server/PacketCompressor.java
+++ b/src/main/java/net/minecraft/server/PacketCompressor.java
@@ -46,7 +46,7 @@ public class PacketCompressor extends MessageToByteEncoder<ByteBuf> {
         this.c = i;
     }
 
-    protected void encode(ChannelHandlerContext channelhandlercontext, Object object, ByteBuf bytebuf) throws Exception {
-        this.a(channelhandlercontext, (ByteBuf) object, bytebuf);
+    protected void encode(ChannelHandlerContext channelhandlercontext, ByteBuf object, ByteBuf bytebuf) throws Exception {
+        this.a(channelhandlercontext, object, bytebuf);
     }
 }
diff --git a/src/main/java/net/minecraft/server/PacketDecrypter.java b/src/main/java/net/minecraft/server/PacketDecrypter.java
index aca9356119b88b2b3b3d0e2ccf036a29bf876992..fded40d40c8cf5d21adca9a630612ec58f4100e7 100644
--- a/src/main/java/net/minecraft/server/PacketDecrypter.java
+++ b/src/main/java/net/minecraft/server/PacketDecrypter.java
@@ -18,7 +18,7 @@ public class PacketDecrypter extends MessageToMessageDecoder<ByteBuf> {
         list.add(this.a.a(channelhandlercontext, bytebuf));
     }
 
-    protected void decode(ChannelHandlerContext channelhandlercontext, Object object, List list) throws Exception {
-        this.a(channelhandlercontext, (ByteBuf) object, list);
+    protected void decode(ChannelHandlerContext channelhandlercontext, ByteBuf object, List<Object> list) throws Exception {
+        this.a(channelhandlercontext, object, list);
     }
 }
diff --git a/src/main/java/net/minecraft/server/PacketEncoder.java b/src/main/java/net/minecraft/server/PacketEncoder.java
index 045a9f17142a536dd32b98921585e93857352e0e..9ebae0b5a96c0f4e5f6475e41251b4d4d519c86a 100644
--- a/src/main/java/net/minecraft/server/PacketEncoder.java
+++ b/src/main/java/net/minecraft/server/PacketEncoder.java
@@ -46,7 +46,7 @@ public class PacketEncoder extends MessageToByteEncoder<Packet> {
         }
     }
 
-    protected void encode(ChannelHandlerContext channelhandlercontext, Object object, ByteBuf bytebuf) throws Exception {
-        this.a(channelhandlercontext, (Packet) object, bytebuf);
+    protected void encode(ChannelHandlerContext channelhandlercontext, Packet object, ByteBuf bytebuf) throws Exception {
+        this.a(channelhandlercontext, object, bytebuf);
     }
 }
diff --git a/src/main/java/net/minecraft/server/PacketEncrypter.java b/src/main/java/net/minecraft/server/PacketEncrypter.java
index bd972ebebe43e82b0eae56882ad21fc4feae84b1..e8ef4725c4d21c49fcc0219578391e15d0164a67 100644
--- a/src/main/java/net/minecraft/server/PacketEncrypter.java
+++ b/src/main/java/net/minecraft/server/PacketEncrypter.java
@@ -17,7 +17,7 @@ public class PacketEncrypter extends MessageToByteEncoder<ByteBuf> {
         this.a.a(bytebuf, bytebuf1);
     }
 
-    protected void encode(ChannelHandlerContext channelhandlercontext, Object object, ByteBuf bytebuf) throws Exception {
-        this.a(channelhandlercontext, (ByteBuf) object, bytebuf);
+    protected void encode(ChannelHandlerContext channelhandlercontext, ByteBuf object, ByteBuf bytebuf) throws Exception {
+        this.a(channelhandlercontext, object, bytebuf);
     }
 }
diff --git a/src/main/java/net/minecraft/server/PacketPrepender.java b/src/main/java/net/minecraft/server/PacketPrepender.java
index e09ede5bfff8c71b82fdcbeb50e84ec7d617f3f1..70cb2632a7de8023facb56e218384cee9a15e889 100644
--- a/src/main/java/net/minecraft/server/PacketPrepender.java
+++ b/src/main/java/net/minecraft/server/PacketPrepender.java
@@ -23,7 +23,7 @@ public class PacketPrepender extends MessageToByteEncoder<ByteBuf> {
         }
     }
 
-    protected void encode(ChannelHandlerContext channelhandlercontext, Object object, ByteBuf bytebuf) throws Exception {
-        this.a(channelhandlercontext, (ByteBuf) object, bytebuf);
+    protected void encode(ChannelHandlerContext channelhandlercontext, ByteBuf object, ByteBuf bytebuf) throws Exception {
+        this.a(channelhandlercontext, object, bytebuf);
     }
 }
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalAvoidTarget.java b/src/main/java/net/minecraft/server/PathfinderGoalAvoidTarget.java
index a879c494f7774e9910999579539b2674bfd513fe..4039be6eedb2e51c9d5152b3fb38f75fe7442cc6 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalAvoidTarget.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalAvoidTarget.java
@@ -27,8 +27,8 @@ public class PathfinderGoalAvoidTarget<T extends Entity> extends PathfinderGoal
                 return entity.isAlive() && PathfinderGoalAvoidTarget.this.a.getEntitySenses().a(entity);
             }
 
-            public boolean apply(Object object) {
-                return this.a((Entity) object);
+            public boolean apply(Entity object) {
+                return this.a(object);
             }
         };
         this.a = entitycreature;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalFollowParent.java b/src/main/java/net/minecraft/server/PathfinderGoalFollowParent.java
index 4a6afe5c55280ed1f2494b7500efa26d6b61ae7f..b9bc704988f236451df2089fd20065a676b4c35d 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalFollowParent.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalFollowParent.java
@@ -18,7 +18,7 @@ public class PathfinderGoalFollowParent extends PathfinderGoal {
         if (this.a.getAge() >= 0) {
             return false;
         } else {
-            List list = this.a.world.a(this.a.getClass(), this.a.getBoundingBox().grow(8.0D, 4.0D, 8.0D));
+            List<EntityAnimal> list = this.a.world.a(this.a.getClass(), this.a.getBoundingBox().grow(8.0D, 4.0D, 8.0D));
             EntityAnimal entityanimal = null;
             double d0 = Double.MAX_VALUE;
 
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalPlay.java b/src/main/java/net/minecraft/server/PathfinderGoalPlay.java
index ada67d493c3af85601349d3b9783da9eb2b6b8a5..4db298c755259795cdf4b3ac33747ed2d84988bb 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalPlay.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalPlay.java
@@ -21,7 +21,7 @@ public class PathfinderGoalPlay extends PathfinderGoal {
         } else if (this.a.bc().nextInt(400) != 0) {
             return false;
         } else {
-            List list = this.a.world.a(EntityVillager.class, this.a.getBoundingBox().grow(6.0D, 3.0D, 6.0D));
+            List<EntityVillager> list = this.a.world.a(EntityVillager.class, this.a.getBoundingBox().grow(6.0D, 3.0D, 6.0D));
             double d0 = Double.MAX_VALUE;
 
             for (EntityVillager entityvillager : list) {
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalTakeFlower.java b/src/main/java/net/minecraft/server/PathfinderGoalTakeFlower.java
index 1f3a004895eee602861c31f3d2125b11c9ee95bf..702054a203857e8870b3f8dbfa712b87bc6d996b 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalTakeFlower.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalTakeFlower.java
@@ -20,7 +20,7 @@ public class PathfinderGoalTakeFlower extends PathfinderGoal {
         } else if (!this.a.world.w()) {
             return false;
         } else {
-            List list = this.a.world.a(EntityIronGolem.class, this.a.getBoundingBox().grow(6.0D, 2.0D, 6.0D));
+            List<EntityIronGolem> list = this.a.world.a(EntityIronGolem.class, this.a.getBoundingBox().grow(6.0D, 2.0D, 6.0D));
 
             if (list.isEmpty()) {
                 return false;
diff --git a/src/main/java/net/minecraft/server/PlayerSelector.java b/src/main/java/net/minecraft/server/PlayerSelector.java
index b5ba44da1be4e0bfd90e48c60f07762c0f10b408..0e030f904832fd75f13096f32f9085d32c4eb2dd 100644
--- a/src/main/java/net/minecraft/server/PlayerSelector.java
+++ b/src/main/java/net/minecraft/server/PlayerSelector.java
@@ -35,18 +35,18 @@ public class PlayerSelector {
     }
 
     public static IChatBaseComponent getPlayerNames(ICommandListener icommandlistener, String s) {
-        List list = getPlayers(icommandlistener, s, Entity.class);
+        List<Entity> list = getPlayers(icommandlistener, s, Entity.class);
 
         if (list.isEmpty()) {
             return null;
         } else {
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList<IChatBaseComponent> arraylist = Lists.newArrayList();
 
             for (Entity entity : list) {
                 arraylist.add(entity.getScoreboardDisplayName());
             }
 
-            return CommandAbstract.a((List) arraylist);
+            return CommandAbstract.a(arraylist);
         }
     }
 
@@ -61,7 +61,7 @@ public class PlayerSelector {
             } else {
                 String s1 = matcher.group(1);
                 BlockPosition blockposition = b(map, icommandlistener.getChunkCoordinates());
-                List list = a(icommandlistener, map);
+                List<World> list = a(icommandlistener, map);
                 ArrayList arraylist = Lists.newArrayList();
 
                 for (World world : list) {
@@ -116,7 +116,7 @@ public class PlayerSelector {
 
     private static List<Predicate<Entity>> a(Map<String, String> map, String s) {
         ArrayList arraylist = Lists.newArrayList();
-        final String s1 = b(map, "type");
+        String s1 = b(map, "type");
         final boolean flag = s1 != null && s1.startsWith("!");
 
         if (flag) {
@@ -133,19 +133,20 @@ public class PlayerSelector {
                         return entity instanceof EntityHuman;
                     }
 
-                    public boolean apply(Object object) {
-                        return this.a((Entity) object);
+                    public boolean apply(Entity object) {
+                        return this.a(object);
                     }
                 });
             }
         } else {
+            final String s1Final = s1;
             arraylist.add(new Predicate<Entity>() {
                 public boolean a(Entity entity) {
-                    return EntityTypes.a(entity, s1) != flag;
+                    return EntityTypes.a(entity, s1Final) != flag;
                 }
 
-                public boolean apply(Object object) {
-                    return this.a((Entity) object);
+                public boolean apply(Entity object) {
+                    return this.a(object);
                 }
             });
         }
@@ -170,8 +171,8 @@ public class PlayerSelector {
                     }
                 }
 
-                public boolean apply(Object object) {
-                    return this.a((Entity) object);
+                public boolean apply(Entity object) {
+                    return this.a(object);
                 }
             });
         }
@@ -195,8 +196,8 @@ public class PlayerSelector {
                     }
                 }
 
-                public boolean apply(Object object) {
-                    return this.a((Entity) object);
+                public boolean apply(Entity object) {
+                    return this.a(object);
                 }
             });
         }
@@ -206,7 +207,7 @@ public class PlayerSelector {
 
     private static List<Predicate<Entity>> d(Map<String, String> map) {
         ArrayList arraylist = Lists.newArrayList();
-        final String s = b(map, "team");
+        String s = b(map, "team");
         final boolean flag = s != null && s.startsWith("!");
 
         if (flag) {
@@ -214,6 +215,7 @@ public class PlayerSelector {
         }
 
         if (s != null) {
+            final String sFinal = s;
             arraylist.add(new Predicate<Entity>() {
                 public boolean a(Entity entity) {
                     if (!(entity instanceof EntityLiving)) {
@@ -223,12 +225,12 @@ public class PlayerSelector {
                         ScoreboardTeamBase scoreboardteambase = entityliving.getScoreboardTeam();
                         String s1 = scoreboardteambase == null ? "" : scoreboardteambase.getName();
 
-                        return s1.equals(s) != flag;
+                        return s1.equals(sFinal) != flag;
                     }
                 }
 
-                public boolean apply(Object object) {
-                    return this.a((Entity) object);
+                public boolean apply(Entity object) {
+                    return this.a(object);
                 }
             });
         }
@@ -238,7 +240,7 @@ public class PlayerSelector {
 
     private static List<Predicate<Entity>> e(Map<String, String> map) {
         ArrayList arraylist = Lists.newArrayList();
-        final Map map1 = a(map);
+        final Map<String, Integer> map1 = a(map);
 
         if (map1 != null && map1.size() > 0) {
             arraylist.add(new Predicate<Entity>() {
@@ -281,8 +283,8 @@ public class PlayerSelector {
                     return true;
                 }
 
-                public boolean apply(Object object) {
-                    return this.a((Entity) object);
+                public boolean apply(Entity object) {
+                    return this.a(object);
                 }
             });
         }
@@ -292,7 +294,7 @@ public class PlayerSelector {
 
     private static List<Predicate<Entity>> f(Map<String, String> map) {
         ArrayList arraylist = Lists.newArrayList();
-        final String s = b(map, "name");
+        String s = b(map, "name");
         final boolean flag = s != null && s.startsWith("!");
 
         if (flag) {
@@ -300,13 +302,14 @@ public class PlayerSelector {
         }
 
         if (s != null) {
+            final String sFinal = s;
             arraylist.add(new Predicate<Entity>() {
                 public boolean a(Entity entity) {
-                    return entity.getName().equals(s) != flag;
+                    return entity.getName().equals(sFinal) != flag;
                 }
 
-                public boolean apply(Object object) {
-                    return this.a((Entity) object);
+                public boolean apply(Entity object) {
+                    return this.a(object);
                 }
             });
         }
@@ -330,8 +333,8 @@ public class PlayerSelector {
                     return (i < 0 || i1 >= k) && (j < 0 || i1 <= l);
                 }
 
-                public boolean apply(Object object) {
-                    return this.a((Entity) object);
+                public boolean apply(Entity object) {
+                    return this.a(object);
                 }
             });
         }
@@ -353,8 +356,8 @@ public class PlayerSelector {
                     return i > j ? k >= i || k <= j : k >= i && k <= j;
                 }
 
-                public boolean apply(Object object) {
-                    return this.a((Entity) object);
+                public boolean apply(Entity object) {
+                    return this.a(object);
                 }
             });
         }
@@ -370,8 +373,8 @@ public class PlayerSelector {
                     return k > l ? i1 >= k || i1 <= l : i1 >= k && i1 <= l;
                 }
 
-                public boolean apply(Object object) {
-                    return this.a((Entity) object);
+                public boolean apply(Entity object) {
+                    return this.a(object);
                 }
             });
         }
@@ -423,8 +426,8 @@ public class PlayerSelector {
                             return entity.locX >= axisalignedbb1.a && entity.locY >= axisalignedbb1.b && entity.locZ >= axisalignedbb1.c ? entity.locX < axisalignedbb1.d && entity.locY < axisalignedbb1.e && entity.locZ < axisalignedbb1.f : false;
                         }
 
-                        public boolean apply(Object object) {
-                            return this.a((Entity) object);
+                        public boolean apply(Entity object) {
+                            return this.a(object);
                         }
                     };
 
@@ -457,8 +460,8 @@ public class PlayerSelector {
                     return ComparisonChain.start().compare(entity.b(blockposition), entity1.b(blockposition)).result();
                 }
 
-                public int compare(Object object, Object object1) {
-                    return this.a((Entity) object, (Entity) object1);
+                public int compare(Entity object, Entity object1) {
+                    return this.a(object, object1);
                 }
             });
         }
@@ -466,7 +469,7 @@ public class PlayerSelector {
         Entity entity = icommandlistener.f();
 
         if (entity != null && oclass.isAssignableFrom(entity.getClass()) && i == 1 && list.contains(entity) && !"r".equals(s)) {
-            list = Lists.newArrayList(new Entity[]{entity});
+            list = Lists.newArrayList((T) entity);
         }
 
         if (i != 0) {
diff --git a/src/main/java/net/minecraft/server/RegistryID.java b/src/main/java/net/minecraft/server/RegistryID.java
index e44fc97675bca1101c85fc868b2cf282c5dce652..fae7897f8c3f4c8df6b05acdc1ec5337d3a293db 100644
--- a/src/main/java/net/minecraft/server/RegistryID.java
+++ b/src/main/java/net/minecraft/server/RegistryID.java
@@ -18,7 +18,7 @@ public class RegistryID<T> implements Registry<T> {
         this.a.put(t0, i);
 
         while (this.b.size() <= i) {
-            this.b.add((Object) null);
+            this.b.add(null);
         }
 
         this.b.set(i, t0);
diff --git a/src/main/java/net/minecraft/server/Scoreboard.java b/src/main/java/net/minecraft/server/Scoreboard.java
index 2b142f101cd7cfb9780eef5c8e13bc96dc6e12e9..db8b2a02ed3eabbd809397366a6f13458c8a769f 100644
--- a/src/main/java/net/minecraft/server/Scoreboard.java
+++ b/src/main/java/net/minecraft/server/Scoreboard.java
@@ -34,14 +34,9 @@ public class Scoreboard {
                 throw new IllegalArgumentException("An objective with the name '" + s + "' already exists!");
             } else {
                 scoreboardobjective = new ScoreboardObjective(this, s, iscoreboardcriteria);
-                Object object = (List) this.objectivesByCriteria.get(iscoreboardcriteria);
+                List<ScoreboardObjective> list = (List<ScoreboardObjective>) this.objectivesByCriteria.computeIfAbsent(iscoreboardcriteria, k -> Lists.newArrayList());
 
-                if (object == null) {
-                    object = Lists.newArrayList();
-                    this.objectivesByCriteria.put(iscoreboardcriteria, object);
-                }
-
-                ((List) object).add(scoreboardobjective);
+                list.add(scoreboardobjective);
                 this.objectivesByName.put(s, scoreboardobjective);
                 this.handleObjectiveAdded(scoreboardobjective);
                 return scoreboardobjective;
@@ -71,21 +66,9 @@ public class Scoreboard {
         if (s.length() > 40) {
             throw new IllegalArgumentException("The player name '" + s + "' is too long!");
         } else {
-            Object object = (Map) this.playerScores.get(s);
-
-            if (object == null) {
-                object = Maps.newHashMap();
-                this.playerScores.put(s, object);
-            }
-
-            ScoreboardScore scoreboardscore = (ScoreboardScore) ((Map) object).get(scoreboardobjective);
-
-            if (scoreboardscore == null) {
-                scoreboardscore = new ScoreboardScore(this, scoreboardobjective, s);
-                ((Map) object).put(scoreboardobjective, scoreboardscore);
-            }
+            Map<ScoreboardObjective, ScoreboardScore> scores = this.playerScores.computeIfAbsent(s, k -> Maps.newHashMap());
 
-            return scoreboardscore;
+            return scores.computeIfAbsent(scoreboardobjective, k -> new ScoreboardScore(this, scoreboardobjective, s));
         }
     }
 
@@ -140,7 +123,7 @@ public class Scoreboard {
     }
 
     public Collection<ScoreboardScore> getScores() {
-        Collection collection = this.playerScores.values();
+        Collection<Map<ScoreboardObjective, ScoreboardScore>> collection = this.playerScores.values();
         ArrayList arraylist = Lists.newArrayList();
 
         for (Map map : collection) {
diff --git a/src/main/java/net/minecraft/server/ScoreboardScore.java b/src/main/java/net/minecraft/server/ScoreboardScore.java
index 707d9c0377823a23f3bb3a8eb11f9399d2a13537..f1bf033f220760d469b35d0625298718148490e9 100644
--- a/src/main/java/net/minecraft/server/ScoreboardScore.java
+++ b/src/main/java/net/minecraft/server/ScoreboardScore.java
@@ -10,8 +10,8 @@ public class ScoreboardScore {
             return scoreboardscore.getScore() > scoreboardscore1.getScore() ? 1 : (scoreboardscore.getScore() < scoreboardscore1.getScore() ? -1 : scoreboardscore1.getPlayerName().compareToIgnoreCase(scoreboardscore.getPlayerName()));
         }
 
-        public int compare(Object object, Object object1) {
-            return this.a((ScoreboardScore) object, (ScoreboardScore) object1);
+        public int compare(ScoreboardScore object, ScoreboardScore object1) {
+            return this.a(object, object1);
         }
     };
     private final Scoreboard b;
diff --git a/src/main/java/net/minecraft/server/ServerPing.java b/src/main/java/net/minecraft/server/ServerPing.java
index b4963e9663810a4c5d7c59a0663ee1bbea129b2f..0205f779b067771798d152ddd7edb37451b624c5 100644
--- a/src/main/java/net/minecraft/server/ServerPing.java
+++ b/src/main/java/net/minecraft/server/ServerPing.java
@@ -131,11 +131,11 @@ public class ServerPing {
                 return jsonobject;
             }
 
-            public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
-                return this.a((ServerPing.ServerPingPlayerSample) object, type, jsonserializationcontext);
+            public JsonElement serialize(ServerPing.ServerPingPlayerSample object, Type type, JsonSerializationContext jsonserializationcontext) {
+                return this.a(object, type, jsonserializationcontext);
             }
 
-            public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+            public ServerPing.ServerPingPlayerSample deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
                 return this.a(jsonelement, type, jsondeserializationcontext);
             }
         }
@@ -177,11 +177,11 @@ public class ServerPing {
                 return jsonobject;
             }
 
-            public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
-                return this.a((ServerPing.ServerData) object, type, jsonserializationcontext);
+            public JsonElement serialize(ServerPing.ServerData object, Type type, JsonSerializationContext jsonserializationcontext) {
+                return this.a(object, type, jsonserializationcontext);
             }
 
-            public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+            public ServerPing.ServerData deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
                 return this.a(jsonelement, type, jsondeserializationcontext);
             }
         }
@@ -236,11 +236,11 @@ public class ServerPing {
             return jsonobject;
         }
 
-        public JsonElement serialize(Object object, Type type, JsonSerializationContext jsonserializationcontext) {
-            return this.a((ServerPing) object, type, jsonserializationcontext);
+        public JsonElement serialize(ServerPing object, Type type, JsonSerializationContext jsonserializationcontext) {
+            return this.a(object, type, jsonserializationcontext);
         }
 
-        public Object deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+        public ServerPing deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
             return this.a(jsonelement, type, jsondeserializationcontext);
         }
     }
diff --git a/src/main/java/net/minecraft/server/ShapeDetector.java b/src/main/java/net/minecraft/server/ShapeDetector.java
index 1409355db2f4f55ee19c89a40c531a5bbb4f355d..e5f1083d857d25ef8a65e6ccd96d714a8838430a 100644
--- a/src/main/java/net/minecraft/server/ShapeDetector.java
+++ b/src/main/java/net/minecraft/server/ShapeDetector.java
@@ -103,8 +103,8 @@ public class ShapeDetector {
             return new ShapeDetectorBlock(this.a, blockposition, this.b);
         }
 
-        public Object load(Object object) throws Exception {
-            return this.a((BlockPosition) object);
+        public ShapeDetectorBlock load(BlockPosition object) throws Exception {
+            return this.a(object);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/ShapeDetectorBlock.java b/src/main/java/net/minecraft/server/ShapeDetectorBlock.java
index 06535925388d1f3a13352f554421f220e5927203..e14873f09dd5565848abba4b1ecdc16d13fa04c3 100644
--- a/src/main/java/net/minecraft/server/ShapeDetectorBlock.java
+++ b/src/main/java/net/minecraft/server/ShapeDetectorBlock.java
@@ -44,8 +44,8 @@ public class ShapeDetectorBlock {
                 return shapedetectorblock != null && predicate.apply(shapedetectorblock.a());
             }
 
-            public boolean apply(Object object) {
-                return this.a((ShapeDetectorBlock) object);
+            public boolean apply(ShapeDetectorBlock object) {
+                return this.a(object);
             }
         };
     }
diff --git a/src/main/java/net/minecraft/server/ShapeDetectorBuilder.java b/src/main/java/net/minecraft/server/ShapeDetectorBuilder.java
index dadbe7f2fe2e54ca9b1600a4f176d82228aaae69..a21b873afc962b63d128d7e3e00501084a912628 100644
--- a/src/main/java/net/minecraft/server/ShapeDetectorBuilder.java
+++ b/src/main/java/net/minecraft/server/ShapeDetectorBuilder.java
@@ -42,7 +42,7 @@ public class ShapeDetectorBuilder {
 
                     for (char c0 : s.toCharArray()) {
                         if (!this.c.containsKey(c0)) {
-                            this.c.put(c0, (Object) null);
+                            this.c.put(c0, null);
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/StatisticList.java b/src/main/java/net/minecraft/server/StatisticList.java
index c42975142f99549e02bd34a2f021afe241aa7e18..4f1bafef7e26f530c3bff6a0dd88f1f1cfc149c6 100644
--- a/src/main/java/net/minecraft/server/StatisticList.java
+++ b/src/main/java/net/minecraft/server/StatisticList.java
@@ -77,7 +77,7 @@ public class StatisticList {
     }
 
     private static void b() {
-        HashSet hashset = Sets.newHashSet();
+        HashSet<Item> hashset = Sets.newHashSet();
 
         for (IRecipe irecipe : CraftingManager.getInstance().getRecipes()) {
             if (irecipe.b() != null) {
diff --git a/src/main/java/net/minecraft/server/WhiteList.java b/src/main/java/net/minecraft/server/WhiteList.java
index c45092db6e05f5dfd02dd299c20a7b4b27a18e25..694d2be521a0123aa30e73f556b8001a66eadd25 100644
--- a/src/main/java/net/minecraft/server/WhiteList.java
+++ b/src/main/java/net/minecraft/server/WhiteList.java
@@ -43,7 +43,7 @@ public class WhiteList extends JsonList<GameProfile, WhiteListEntry> {
         return null;
     }
 
-    protected String a(Object object) {
-        return this.b((GameProfile) object);
+    protected String a(GameProfile object) {
+        return this.b(object);
     }
 }
diff --git a/src/main/java/net/minecraft/server/WorldGenFlatInfo.java b/src/main/java/net/minecraft/server/WorldGenFlatInfo.java
index 67dcf86f83ac604ee52715ce4e5a8dd3fdb06335..c12ba917f00b33bf5789637ded05de691fdd6e8c 100644
--- a/src/main/java/net/minecraft/server/WorldGenFlatInfo.java
+++ b/src/main/java/net/minecraft/server/WorldGenFlatInfo.java
@@ -68,7 +68,7 @@ public class WorldGenFlatInfo {
                 }
 
                 stringbuilder.append(((String) entry.getKey()).toLowerCase());
-                Map map = (Map) entry.getValue();
+                Map<String, String> map = (Map) entry.getValue();
 
                 if (!map.isEmpty()) {
                     stringbuilder.append("(");
@@ -114,7 +114,7 @@ public class WorldGenFlatInfo {
             }
         }
 
-        Object object = null;
+        Block block = null;
 
         try {
             String s1 = astring[astring.length - 1];
diff --git a/src/main/java/net/minecraft/server/WorldGenMonumentPieces.java b/src/main/java/net/minecraft/server/WorldGenMonumentPieces.java
index 7105bfea53736607e8e67b082e2f0de268e901e7..332d7f2a23c1a3331c95412cfd4bda9d86c6f220 100644
--- a/src/main/java/net/minecraft/server/WorldGenMonumentPieces.java
+++ b/src/main/java/net/minecraft/server/WorldGenMonumentPieces.java
@@ -184,12 +184,12 @@ public class WorldGenMonumentPieces {
                     this.l = new StructureBoundingBox(i, 39, j, i + 58 - 1, 61, j + 58 - 1);
             }
 
-            List list = this.a(random);
+            List<WorldGenMonumentPieces.WorldGenMonumentStateTracker> list = this.a(random);
 
             this.o.d = true;
             this.q.add(new WorldGenMonumentPieces.WorldGenMonumentPieceEntry(this.m, this.o));
             this.q.add(new WorldGenMonumentPieces.WorldGenMonumentPiece2(this.m, this.p, random));
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList<WorldGenMonumentPieces.IWorldGenMonumentPieceSelector> arraylist = Lists.newArrayList();
 
             arraylist.add(new WorldGenMonumentPieces.WorldGenMonumentPieceSelector6());
             arraylist.add(new WorldGenMonumentPieces.WorldGenMonumentPieceSelector4());
@@ -310,7 +310,7 @@ public class WorldGenMonumentPieces {
             this.p.b[EnumDirection.EAST.a()].b[EnumDirection.UP.a()].d = true;
             this.p.b[EnumDirection.NORTH.a()].b[EnumDirection.UP.a()].d = true;
             this.p.b[EnumDirection.EAST.a()].b[EnumDirection.NORTH.a()].b[EnumDirection.UP.a()].d = true;
-            ArrayList arraylist = Lists.newArrayList();
+            ArrayList<WorldGenMonumentPieces.WorldGenMonumentStateTracker> arraylist = Lists.newArrayList();
 
             for (WorldGenMonumentPieces.WorldGenMonumentStateTracker worldgenmonumentpieces_worldgenmonumentstatetracker3 : aworldgenmonumentpieces_worldgenmonumentstatetracker) {
                 if (worldgenmonumentpieces_worldgenmonumentstatetracker3 != null) {
