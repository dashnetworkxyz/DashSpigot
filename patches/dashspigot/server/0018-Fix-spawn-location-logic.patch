From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MasterDash5 <constant4337@molecularmail.com>
Date: Mon, 20 Oct 2025 16:25:00 -0600
Subject: [PATCH] Fix spawn location logic


diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index d981c89fd182bae75c928616edc5944f6ee860f8..80c7900aeceb3bf217b0ab56e9d8d0f2ad10529c 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -85,11 +85,31 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         this.viewDistance = world.spigotConfig.viewDistance; // PaperSpigot - Player view distance API
         playerinteractmanager.player = this;
         this.playerInteractManager = playerinteractmanager;
+        BlockPosition blockposition = getSpawnPoint(minecraftserver, worldserver); // DashSpigot - Move spawn point logic
+
+        this.server = minecraftserver;
+        this.bK = minecraftserver.getPlayerList().a((EntityHuman) this);
+        this.S = 0.0F;
+        this.setPositionRotation(blockposition, 0.0F, 0.0F);
+
+        while (!worldserver.getCubes(this, this.getBoundingBox()).isEmpty() && this.locY < 255.0D) {
+            this.setPosition(this.locX, this.locY + 1.0D, this.locZ);
+        }
+
+        // CraftBukkit start
+        this.displayName = net.kyori.adventure.text.Component.text(this.getName()); // PandaSpigot - Adventure
+        // this.canPickUpLoot = true; TODO
+        this.maxHealthCache = this.getMaxHealth();
+        // CraftBukkit end
+    }
+
+    // DashSpigot start - Move spawn point logic
+    public final BlockPosition getSpawnPoint(MinecraftServer minecraftserver, WorldServer worldserver) {
         BlockPosition blockposition = worldserver.getSpawn();
 
         if (!worldserver.worldProvider.o() && worldserver.getWorldData().getGameType() != WorldSettings.EnumGamemode.ADVENTURE) {
             int i = Math.max(5, minecraftserver.getSpawnProtection() - 6);
-            int j = MathHelper.floor(worldserver.getWorldBorder().b((double) blockposition.getX(), (double) blockposition.getZ()));
+            int j = MathHelper.floor(worldserver.getWorldBorder().b(blockposition.getX(), blockposition.getZ()));
 
             if (j < i) {
                 i = j;
@@ -102,21 +122,9 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             blockposition = worldserver.r(blockposition.a(this.random.nextInt(i * 2) - i, 0, this.random.nextInt(i * 2) - i));
         }
 
-        this.server = minecraftserver;
-        this.bK = minecraftserver.getPlayerList().a((EntityHuman) this);
-        this.S = 0.0F;
-        this.setPositionRotation(blockposition, 0.0F, 0.0F);
-
-        while (!worldserver.getCubes(this, this.getBoundingBox()).isEmpty() && this.locY < 255.0D) {
-            this.setPosition(this.locX, this.locY + 1.0D, this.locZ);
-        }
-
-        // CraftBukkit start
-        this.displayName = net.kyori.adventure.text.Component.text(this.getName()); // PandaSpigot - Adventure
-        // this.canPickUpLoot = true; TODO
-        this.maxHealthCache = this.getMaxHealth();
-        // CraftBukkit end
+        return blockposition;
     }
+    // DashSpigot end
 
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
@@ -526,10 +534,14 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
         boolean endPortal = this.dimension == 1 && i == 1;
         if (endPortal) {
             this.b((Statistic) AchievementList.D);
+            this.world.kill(this); // DashSpigot - Fix end obsidian platform
             if (!world.paperSpigotConfig.disableEndCredits) {
-                this.world.kill(this);
                 this.viewingCredits = true;
                 this.playerConnection.sendPacket(new PacketPlayOutGameStateChange(4, 0.0F));
+            // DashSpigot start - Fix end obsidian platform
+            } else {
+                this.server.getPlayerList().changeDimension(this, 0, TeleportCause.END_PORTAL);
+            // DashSpigot end
             }
         // PaperSpigot end
         } else {
@@ -549,12 +561,16 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             } else {
                 this.b((Statistic) AchievementList.y);
             }
+        // DashSpigot start - Fix end obsidian platform
+        /*
         }
 
         // PaperSpigot start - Allow configurable end portal credits
         if (!endPortal || world.paperSpigotConfig.disableEndCredits) {
+         */
             // CraftBukkit start
-            TeleportCause cause = (endPortal || (this.dimension == 1 || i == 1)) ? TeleportCause.END_PORTAL : TeleportCause.NETHER_PORTAL;
+            TeleportCause cause = (this.dimension == 1 || i == 1) ? TeleportCause.END_PORTAL : TeleportCause.NETHER_PORTAL;
+        // DashSpigot end
             this.server.getPlayerList().changeDimension(this, i, cause);
             // CraftBukkit end
             this.lastSentExp = -1;
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index a82a78278b16088caa7e33449035e4023bfd92b7..ec2848176074617ca37c2237c7fea07fbc30ab3a 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -583,7 +583,7 @@ public abstract class PlayerList {
 
             if (location == null) {
                 cworld = (CraftWorld) this.server.server.getWorlds().get(0);
-                blockposition = cworld.getHandle().getSpawn();
+                blockposition = entityplayer1.getSpawnPoint(this.server, cworld.getHandle()); // DashSpigot - Randomize spawn position
                 location = new Location(cworld, blockposition.getX() + 0.5, blockposition.getY(), blockposition.getZ() + 0.5);
             }
 
@@ -680,7 +680,12 @@ public abstract class PlayerList {
                 // THE_END -> NORMAL; use bed if available, otherwise default spawn
                 exit = ((org.bukkit.craftbukkit.entity.CraftPlayer) entityplayer.getBukkitEntity()).getBedSpawnLocation();
                 if (exit == null || ((CraftWorld) exit.getWorld()).getHandle().dimension != 0) {
-                    exit = exitWorld.getWorld().getSpawnLocation();
+                // DashSpigot start - Randomize spawn position & Fix bed position
+                    BlockPosition randomSpawn = entityplayer.getSpawnPoint(this.server, exitWorld);
+                    exit = new Location(exitWorld.getWorld(), randomSpawn.getX() + 0.5, randomSpawn.getY(), randomSpawn.getZ() + 0.5);
+                } else {
+                    exit.add(0.5, 0.10000000149011612, 0.5);
+                // DashSpigot end
                 }
             } else {
                 // NORMAL <-> NETHER or NORMAL -> THE_END
@@ -690,7 +695,7 @@ public abstract class PlayerList {
         }
 
         TravelAgent agent = exit != null ? (TravelAgent) ((CraftWorld) exit.getWorld()).getHandle().getTravelAgent() : org.bukkit.craftbukkit.CraftTravelAgent.DEFAULT; // return arbitrary TA to compensate for implementation dependent plugins
-        agent.setCanCreatePortal(cause != TeleportCause.END_PORTAL); // PaperSpigot - Configurable end credits, don't allow End Portals to create portals
+        //agent.setCanCreatePortal(cause != TeleportCause.END_PORTAL || i == 1); // PaperSpigot - Configurable end credits, don't allow End Portals to create portals // DashSpigot - Fix end obsidian platform
 
         PlayerPortalEvent event = new PlayerPortalEvent(entityplayer.getBukkitEntity(), enter, exit, agent, cause);
         event.useTravelAgent(useTravelAgent);
@@ -700,7 +705,7 @@ public abstract class PlayerList {
         }
 
         // PaperSpigot - Configurable end credits, if a plugin sets to use a travel agent even if the cause is an end portal, ignore it
-        exit = cause != TeleportCause.END_PORTAL && event.useTravelAgent() ? event.getPortalTravelAgent().findOrCreate(event.getTo()) : event.getTo();
+        exit = (cause != TeleportCause.END_PORTAL || i == 1) && event.useTravelAgent() ? event.getPortalTravelAgent().findOrCreate(event.getTo()) : event.getTo(); // DashSpigot - Fix end obsidian platform
         if (exit == null) {
             return;
         }
@@ -718,7 +723,7 @@ public abstract class PlayerList {
         exitWorld.getTravelAgent().adjustExit(entityplayer, exit, velocity);
         exitWorld.chunkProviderServer.forceChunkLoad = before;
 
-        this.moveToWorld(entityplayer, exitWorld.dimension, true, exit, false); // Vanilla doesn't check for suffocation when handling portals, so neither should we
+        this.moveToWorld(entityplayer, exitWorld.dimension, true, exit, cause == TeleportCause.END_PORTAL && i == 0); // Vanilla doesn't check for suffocation when handling portals, so neither should we // DashSpigot - Check for suffocation on THE_END -> NORMAL
         // DashSpigot start - Fix MC-233: Portal travel sound doesn't play
         if (cause == TeleportCause.NETHER_PORTAL) {
             entityplayer.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect("portal.travel", entityplayer.locX, entityplayer.locY, entityplayer.locZ, 0.25F, entityplayer.random.nextFloat() * 0.4F + 0.8F));
@@ -779,7 +784,7 @@ public abstract class PlayerList {
             if (i == 1) {
                 // use default NORMAL world spawn instead of target
                 worldserver1 = this.server.worlds.get(0);
-                blockposition = worldserver1.getSpawn();
+                blockposition = worldserver1.r(worldserver1.getSpawn()); // DashSpigot - Fix entity THE_END -> NORMAL location
             } else {
                 blockposition = worldserver1.getDimensionSpawn();
             }
